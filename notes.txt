Eleanor Carrey
Diego
Rishi
Laga Bilaabo
Professor Noodles

General: https://codegym.cc/groups/codegym
Random: https://codegym.cc/groups/random
Leaderboard: https://codegym.cc/groups/random/leaderboard
Java Developer: https://codegym.cc/groups/java-developer


Books:
"Kathy Sierra and Bert Bates, Head First Java"
"Herbert Schildt: Java: The Complete Reference"
"Bruce Eckel, Thinking in Java"
"Charles Petzold, Code: The Hidden Language of Computer Hardware and Software"
"Aditya Bhargava, Grokking Algorithms".

Internet sites
https://en.wikipedia.org/wiki/Object-oriented_programming

Reading keyboard input
'''
import java.io.*;


BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

int num1 = Integer.parseInt(reader.readLine());
int num2 = Integer.parseInt(reader.readLine());
String name = reader.readLine();


System.out.println(name + " will receive " + num1 + " in " + num2 + " years.");

'''

iterators through maps
'''
public static void main(String[] args)
{
    Map<String, String> map = new HashMap<String, String>();
    map.put("first", "Rain");
    map.put("second", "In");
    map.put("third", "Spain");

    for (Map.Entry<String, String> pair : map.entrySet())
    {
        String key = pair.getKey();                      // Key
        String value = pair.getValue();                  // Value
        System.out.println(key + ":" + value);
    }
}

Iterator<Map.Entry<String,Integer>> iterator = map.entrySet().iterator();
   while (iterator.hasNext()) {
      Map.Entry<String,Integer> entry = iterator.next();
         if (entry.getValue() < 500) {
             iterator.remove();
         }
   }


   for (Map.Entry<String, Integer> pair : map.entrySet()) {
       System.out.println(pair.getKey() + " - " + pair.getValue());
    }

'''

Literal types:
"Rain In Spain"  - Literal String
115 - Literal int.
0.125 - Literal float
'\u1234' - Literal char.
22222L - long
12.3232 - float
12.3333333 - double
'T'  - char
true,false -  boolean

# Multithreading rules:
Rule 1.
 Releasing a mutex happens before the same monitor is acquired by another thread.
Rule 2.
 The Thread.start() method happens before Thread.run().
Rule 3.
 The end of the run() method happens before the return from the join() method.
Rule 4.
 Writing to a volatile variable happens before reading from that same variable. 